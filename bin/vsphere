#!/usr/bin/env python2.7

"""
Interactive CLI for VMware vSphere orchestration.

Usage:
    vsphere cluster ds <name>
    vsphere cluster hosts <name>
    vsphere cluster list
    vsphere cluster net <name>
    vsphere cluster pools <name>
    vsphere datastore browse <name> <path>
    vsphere datastore download <name> <path>
    vsphere datastore list
    vsphere datastore upload <name> <file> <path>
    vsphere dc ds <name>
    vsphere dc list
    vsphere dc net <name>
    vsphere folder list
    vsphere host ds <name>
    vsphere host list
    vsphere host hw <name>
    vsphere host net <name>
    vsphere host perf <name>
    vsphere pool list
    vsphere pool vms <name>
    vsphere template list
    vsphere vm create <name> <template> [--mem=<memory>] [--cpu=<cpu>] [--network=<name>] [--fold=<location>] [--respool=<pool>]
    vsphere vm delete <name>
    vsphere vm details <name>
    vsphere vm list
    vsphere vm start <name>
    vsphere vm stop <name>
    vsphere vm suspend <name>
    vsphere vm reboot <name>
    vsphere vm reset <name>
    vsphere vm update <name> <cpu> <memory>

Options:
    -h, --help         Show this screen and exit.
    -v, --version      Show this program version number.
"""

import os, sys
import requests
from docopt import docopt, DocoptExit
from pyVim import connect
from pyVmomi import vmodl, vim
import atexit
from vsphere.config import EsxConfig
from vsphere.cluster import cluster_parser
from vsphere.folder import folder_parser
from vsphere.dc import dc_parser
from vsphere.host import host_parser
from vsphere.pool import pool_parser
from vsphere.vm import vm_parser
from vsphere.template import template_parser
from vsphere.datastore import datastore_parser

VERSION = "1.0.0"

def opt_parser(opt):
    if   opt['vm']        == True: vm_parser(service, opt)
    elif opt['template']  == True: template_parser(service, opt)
    elif opt['host']      == True: host_parser(service, opt)
    elif opt['dc']        == True: dc_parser(service, opt)
    elif opt['cluster']   == True: cluster_parser(service, opt)
    elif opt['pool']      == True: pool_parser(service, opt)
    elif opt['folder']    == True: folder_parser(service, opt)
    elif opt['datastore'] == True: datastore_parser(service, opt)

########
# MAIN #
########

if __name__ == '__main__':
    # use UTF-8 encoding instead of unicode to support more characters
    reload(sys)
    sys.setdefaultencoding("utf-8")

    # disable SSL/TLS warnings
    requests.packages.urllib3.disable_warnings()

    cfg = EsxConfig()

    # Connect to vSphere
    service = connect.SmartConnect(host=cfg.vs_host, user=cfg.vs_user, pwd=cfg.vs_password, compress=False)
    atexit.register(connect.Disconnect, service)

    # Parse command-line
    opt = docopt(__doc__, version=VERSION, argv=sys.argv[1:])
    opt_parser(opt)
