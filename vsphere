#!/usr/bin/env python2.7

"""
Interactive CLI for VMware vSphere orchestration.

Usage:
    vsphere dc list
    vsphere dc net <name>
    vsphere dc ds <name>
    vsphere host list
    vsphere host hw <name>
    vsphere host net <name>
    vsphere host ds <name>
    vsphere host perf <name>
    vsphere vm list [<name>]
    vsphere vm details <name>
    vsphere vm create <name> <template> [--mem=<memory>] [--cpu=<cpu>] [--network=<network_name>] [--folder=<Where_the_vm_is_stored>]
    vsphere vm delete <name>
    vsphere vm start <name>
    vsphere vm stop <name>
    vsphere vm reset <name>
    vsphere vm reboot <name>
    vsphere vm suspend <name>
    vsphere template list [<name>]
    vsphere datastore list
    vsphere datastore browse <name> <path>
    vsphere datastore download <name> <path>
    vsphere datastore upload <name> <file> <path>

Options:
    -h, --help         Show this screen and exit.
    -v, --version      Show this program version number.
"""

import os, sys, stat, cmd, re, time
from docopt import docopt, DocoptExit
from pyVim import connect
from pyVmomi import vmodl, vim
import atexit
from config import EsxConfig
from dc import dc_parser
from host import host_parser
from vm import vm_parser
from template import template_parser
from datastore import datastore_parser

VERSION = "1.0"

def opt_parser(opt):
    if   opt['vm']        == True: vm_parser(service, opt)
    elif opt['template']  == True: template_parser(service, opt)
    elif opt['host']      == True: host_parser(service, opt)
    elif opt['dc']        == True: dc_parser(service, opt)
    elif opt['datastore'] == True: datastore_parser(service, opt)

########
# MAIN #
########

# use UTF-8 encoding instead of unicode to support more characters
reload(sys)
sys.setdefaultencoding("utf-8")

# disable SSL/TLS warnings
#import requests
#requests.packages.urllib3.disable_warnings()

cfg = EsxConfig()

# Connect to vSphere
service = connect.SmartConnect(host=cfg.vs_host, user=cfg.vs_user, pwd=cfg.vs_password, compress=False)
atexit.register(connect.Disconnect, service)

#from misc import esx_objects
#objs = esx_objects(service)
#print objs

# Parse command-line
opt = docopt(__doc__, version=VERSION, argv=sys.argv[1:])
opt_parser(opt)
